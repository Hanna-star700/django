from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, authenticate
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from django.contrib import messages
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from .models import Student, QuizQuestion, QuizResult, VideoLesson, QuizAttempt

def home(request):
    context = {
        'total_lessons': 10,
        'total_exercises': 25,
        'total_users': 150,
    }
    return render(request, 'home.html', context)

def start_learning(request):
    """–ü–æ—á–∞—Ç–∏ –≤–∏–≤—á–µ–Ω–Ω—è - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Ç–µ—Å—Ç"""
    return redirect('quiz')

def quiz(request):
    """–í—Å—Ç—É–ø–Ω–∏–π —Ç–µ—Å—Ç"""
    questions = QuizQuestion.objects.all()  
    context = {
        'questions': questions,
        'total_questions': len(questions)
    }
    return render(request, 'quiz.html', context)

@csrf_exempt
def submit_quiz(request):
    """–û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É"""
    if request.method == 'POST':
        data = json.loads(request.body)
        answers = data.get('answers', {})
        name = (data.get('name') or '').strip() or '–ì—ñ—Å—Ç—å'
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        correct_count = 0
        total_questions = QuizQuestion.objects.count()  # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –≤ –±–∞–∑—ñ
        wrong_categories = {}
        
        for question_id, answer in answers.items():
            try:
                question = QuizQuestion.objects.get(id=question_id)
                if answer == question.correct_answer:
                    correct_count += 1
                else:
                    # –Ω–∞–∫–æ–ø–∏—á—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                    cat = (question.category or '–û—Å–Ω–æ–≤–∏')
                    wrong_categories[cat] = wrong_categories.get(cat, 0) + 1
            except QuizQuestion.DoesNotExist:
                continue
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–Ω–æ–Ω—ñ–º–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        percentage = (correct_count / total_questions * 100) if total_questions > 0 else 0
        topics_to_review = [c for c, _ in sorted(wrong_categories.items(), key=lambda x: x[1], reverse=True)[:3]]
        # –î–æ—Å—è–≥–Ω–µ–Ω–Ω—è
        if percentage >= 80:
            achievement = 'üèÜ Gold: –í—ñ–¥–º—ñ–Ω–Ω–∏–π —Å—Ç–∞—Ä—Ç!'
        elif percentage >= 60:
            achievement = '‚≠ê Silver: –ì–∞—Ä–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
        elif percentage >= 40:
            achievement = 'üéñÔ∏è Bronze: –Ñ –ø—Ä–æ–≥—Ä–µ—Å'
        else:
            achievement = 'üå± Newbie: –ü–æ—á–∞—Ç–æ–∫ —à–ª—è—Ö—É'

        # –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–ø—Ä–æ–±—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥—É
        try:
            QuizAttempt.objects.create(
                name=name,
                score=correct_count,
                total=total_questions,
                percentage=percentage,
            )
        except Exception:
            pass

        result = {
            'name': name,
            'score': correct_count,
            'total': total_questions,
            'percentage': percentage,
            'achievement': achievement,
            'topics': topics_to_review,
        }
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
        recommendations = generate_recommendations(correct_count, total_questions)
        result['recommendations'] = recommendations
        
        return JsonResponse(result)

def generate_recommendations(score, total):
    """–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"""
    percentage = (score / total * 100) if total > 0 else 0
    
    if percentage >= 80:
        return "–í—ñ–¥–º—ñ–Ω–Ω–æ! –í–∏ –º–∞—î—Ç–µ —Ö–æ—Ä–æ—à—ñ –±–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ —Ç–µ–º–∞–º–∏ Python."
    elif percentage >= 60:
        return "–î–æ–±—Ä–µ! –£ –≤–∞—Å —î –±–∞–∑–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è, –∞–ª–µ –≤–∞—Ä—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –æ—Å–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Ç–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å Python."
    elif percentage >= 40:
        return "–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∑ –æ—Å–Ω–æ–≤–∞–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ—á–∞—Ç–∏ –∑ –±–∞–∑–æ–≤–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü—ñ–π –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è."
    else:
        return "–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –ø–æ—á–∞—Ç–∏ –∑ –Ω—É–ª—è –∑ –æ—Å–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Ç–∞ Python. –ù–µ –ø–æ—Å–ø—ñ—à–∞–π—Ç–µ, –≤–∞–∂–ª–∏–≤–æ –∑–∞—Å–≤–æ—ó—Ç–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ñ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó."

def quiz_results(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–µ—Å—Ç—É"""
    return render(request, 'quiz_results.html')

def register(request):
    return redirect('auth')

@login_required
def video_lessons(request):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –≤—ñ–¥–µ–æ —É—Ä–æ–∫–∞–º–∏"""
    lessons = VideoLesson.objects.all().order_by('order')
    context = {
        'lessons': lessons
    }
    return render(request, 'video_lessons.html', context)

def lessons(request):
    lessons_data = [
        {'id': 1, 'title': '–û—Å–Ω–æ–≤–∏ Python', 'description': '–ó–º—ñ–Ω–Ω—ñ, —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö, –æ–ø–µ—Ä–∞—Ü—ñ—ó', 'progress': 100},
        {'id': 2, 'title': '–£–º–æ–≤–∏', 'description': 'if, elif, else statements', 'progress': 80},
        {'id': 3, 'title': '–¶–∏–∫–ª–∏', 'description': 'for, while loops', 'progress': 60},
        {'id': 4, 'title': '–§—É–Ω–∫—Ü—ñ—ó', 'description': '–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π', 'progress': 40},
        {'id': 5, 'title': '–°–ø–∏—Å–∫–∏', 'description': '–†–æ–±–æ—Ç–∞ –∑ –∫–æ–ª–µ–∫—Ü—ñ—è–º–∏ –¥–∞–Ω–∏—Ö', 'progress': 20},
        {'id': 6, 'title': '–°–ª–æ–≤–Ω–∏–∫–∏', 'description': 'Key-value —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö', 'progress': 0},
    ]
    return render(request, 'lessons.html', {'lessons': lessons_data})

def tests(request):
    if request.method == 'POST':
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –¥–ª—è —Ç–µ—Å—Ç—É
        correct_answers = {
            'q1': 'b',  # 2 + 3 * 2 = 2 + 6 = 8
            'q2': 'a',  # "Hello"[1:4] = "ell"
            'q3': 'a',  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç 5
            'q4': 'b',  # type(3.14) = float
            'q5': 'b',  # len([1,2,3,4]) = 4
        }
        
        # –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        score = 0
        total = len(correct_answers)
        
        for question, correct_answer in correct_answers.items():
            user_answer = request.POST.get(question)
            if user_answer == correct_answer:
                score += 1
        
        percentage = (score / total * 100) if total > 0 else 0
        
        # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        if percentage >= 80:
            message = "–í—ñ–¥–º—ñ–Ω–Ω–æ! üèÜ"
            level = "success"
        elif percentage >= 60:
            message = "–î–æ–±—Ä–µ! ‚≠ê"
            level = "info"
        elif percentage >= 40:
            message = "–ù–µ–ø–æ–≥–∞–Ω–æ! üéñÔ∏è"
            level = "warning"
        else:
            message = "–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ üìö"
            level = "error"
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—ñ—ó –¥–ª—è –ø–æ–∫–∞–∑—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ
        request.session['test_result'] = {
            'score': score,
            'total': total,
            'percentage': round(percentage, 1),
            'message': message,
            'level': level
        }
        
        return redirect('tests')
    
    # GET –∑–∞–ø–∏—Ç - –ø–æ–∫–∞–∑—É—î–º–æ —Ñ–æ—Ä–º—É —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —è–∫—â–æ —î
    result = request.session.pop('test_result', None)
    return render(request, 'tests.html', {'result': result})

def rating(request):
    attempts = QuizAttempt.objects.all().order_by('-percentage', '-created_at')[:20]
    return render(request, 'rating.html', {'attempts': attempts})

def login_view(request):
    return redirect('auth')

def logout_view(request):
    logout(request)
    messages.info(request, '–í–∏ –≤–∏–π—à–ª–∏ –∑ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É.')
    return redirect('home')

def auth_page(request):
    login_form = AuthenticationForm(request, data=request.POST or None)
    register_form = UserCreationForm(request.POST or None)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫–∏–π —Ç–∞–± –ø–æ–∫–∞–∑–∞—Ç–∏
    show_register = request.GET.get('tab') == 'register' or request.POST.get('form_type') == 'register'

    if request.method == 'POST':
        form_type = request.POST.get('form_type')
        if form_type == 'login':
            if login_form.is_valid():
                user = login_form.get_user()
                login(request, user)
                messages.success(request, '–í—Ö—ñ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!')
                return redirect('home')
        elif form_type == 'register':
            if register_form.is_valid():
                user = register_form.save(commit=False)
                # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ù–ï –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω–∫–∏
                user.is_staff = False
                user.is_superuser = False
                user.save()
                Student.objects.create(
                    user=user,
                    name=user.username,
                    email=user.email or '',
                    age=0,
                    is_registered=True
                )
                login(request, user)
                messages.success(request, '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!')
                return redirect('video_lessons')

    return render(request, 'auth.html', {
        'login_form': login_form,
        'register_form': register_form,
        'show_register': show_register,
    })